(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{104:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,f=u["".concat(o,".").concat(d)]||u[d]||b[d]||i;return n?r.a.createElement(f,c(c({ref:t},l),{},{components:n})):r.a.createElement(f,c({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},67:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),i=(n(0),n(104)),o={title:"Functions"},c={unversionedId:"api/functions",id:"api/functions",isDocsHomePage:!1,title:"Functions",description:"assert()",source:"@site/docs/api/functions.mdx",slug:"/api/functions",permalink:"/docs/api/functions",editUrl:"https://github.com/roblox-ts/roblox-ts.github.io/blob/master/docs/api/functions.mdx",version:"current",sidebar:"docs",previous:{title:"Constructors",permalink:"/docs/api/constructors"},next:{title:"Utility Types",permalink:"/docs/api/utility-types"}},s=[{value:"<code>assert()</code>",id:"assert",children:[]},{value:"<code>typeOf()</code>",id:"typeof",children:[]},{value:"<code>typeIs()</code>",id:"typeis",children:[]},{value:"<code>classIs()</code>",id:"classis",children:[]},{value:"<code>opcall()</code>",id:"opcall",children:[]},{value:"<code>identity()</code>",id:"identity",children:[]}],l={toc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"assert"},Object(i.b)("inlineCode",{parentName:"h3"},"assert()")),Object(i.b)("p",null,"roblox-ts's assert uses \"JavaScript truthiness\" for it's condition. This means that ",Object(i.b)("inlineCode",{parentName:"p"},'""')," (empty string), ",Object(i.b)("inlineCode",{parentName:"p"},"0"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"NaN")," values will cause the assertion to fail in addition to ",Object(i.b)("inlineCode",{parentName:"p"},"undefined")," and ",Object(i.b)("inlineCode",{parentName:"p"},"false"),"."),Object(i.b)("p",null,"The reason for this is so that we can take advantage of TypeScript's ",Object(i.b)("inlineCode",{parentName:"p"},"asserts value")," predicate feature."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},'function foo(instance: Instance) {\n    assert(instance.IsA("Part"));\n    print(instance.Size); // instance _must_ be a Part to reach this line\n}\n')),Object(i.b)("p",null,"Because of this change, ",Object(i.b)("inlineCode",{parentName:"p"},"assert(0)")," or ",Object(i.b)("inlineCode",{parentName:"p"},'assert("")')," will cause an error in roblox-ts, but not in Luau."),Object(i.b)("h3",{id:"typeof"},Object(i.b)("inlineCode",{parentName:"h3"},"typeOf()")),Object(i.b)("p",null,'Unfortunately, TypeScript already has an operator named "typeof" in the form of ',Object(i.b)("inlineCode",{parentName:"p"},"typeof x"),". Because of this, we cannot expose the Luau ",Object(i.b)("inlineCode",{parentName:"p"},"typeof()")," function directly. To get around this, we compile ",Object(i.b)("inlineCode",{parentName:"p"},"typeOf(value)")," into ",Object(i.b)("inlineCode",{parentName:"p"},"typeof(value)"),"."),Object(i.b)("h3",{id:"typeis"},Object(i.b)("inlineCode",{parentName:"h3"},"typeIs()")),Object(i.b)("p",null,"Checking types with ",Object(i.b)("inlineCode",{parentName:"p"},"typeOf")," is usually not very useful with roblox-ts unless you need the string value that is returned. This is because TypeScript cannot infer that your if-statement confirmed the value was type checked:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},'function foo(value: unknown) {\n    if (typeOf(value) === "Vector3") {\n        print(value.X); // error: value is still unknown!\n    }\n}\n')),Object(i.b)("p",null,"To get around this, ",Object(i.b)("inlineCode",{parentName:"p"},'typeIs(value, "type")')," compiles to ",Object(i.b)("inlineCode",{parentName:"p"},'typeof(value) == "type"')," and helps TypeScript infer the value was type checked:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},'function foo(value: unknown) {\n    if (typeIs(value, "Vector3")) {\n        print(value.X); // success!\n    }\n}\n')),Object(i.b)("h3",{id:"classis"},Object(i.b)("inlineCode",{parentName:"h3"},"classIs()")),Object(i.b)("p",null,"Similar to ",Object(i.b)("inlineCode",{parentName:"p"},"typeIs"),", ",Object(i.b)("inlineCode",{parentName:"p"},'classIs(value, "ClassName")')," compiles to ",Object(i.b)("inlineCode",{parentName:"p"},'value.ClassName == "ClassName"'),". This is useful for cases where you might want to avoid ",Object(i.b)("inlineCode",{parentName:"p"},"instance.IsA()"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},'function foo(value: Instance) {\n    // value.IsA("Script") would return true for LocalScripts!\n    if (classIs(value, "Script")) {\n        print(value.Name);\n    }\n}\n')),Object(i.b)("h3",{id:"opcall"},Object(i.b)("inlineCode",{parentName:"h3"},"opcall()")),Object(i.b)("p",null,"While ",Object(i.b)("inlineCode",{parentName:"p"},"pcall")," is available, it returns the type ",Object(i.b)("inlineCode",{parentName:"p"},"LuaTuple<[false, string] | [true, T]>")," which is difficult to use!"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"const [success, valueOrError] = pcall(() => 123);\n// valueOrError is string | number\n// if it worked -> number\n// if it errored -> string\n\nif (success) {\n    print(valueOrError); // string | number\n} else {\n    print(valueOrError); // string | number\n}\n")),Object(i.b)("p",null,"The problem here is that ",Object(i.b)("inlineCode",{parentName:"p"},"success")," and ",Object(i.b)("inlineCode",{parentName:"p"},"valueOrError")," are not linked after the destructure happens. You ",Object(i.b)("em",{parentName:"p"},"can")," avoid destructuring the result, ",Object(i.b)("a",{parentName:"p",href:"https://roblox-ts.com/playground/#code/MYewdgzgLgBATgUwgVwDawLwwA7AIaqoAURAlDBgHwwCMATAMykDcAUKwJYBmMRiK6ANoAGALrkA3qxgyYoSLABuBZAgrwkaKIJqi2snHA5goRZalUsYAemswwyALYAjBHFYBfGAlQQ1Ug3loGHNVdX4tHT1pWWwjEzMVBCtbGGh4gHNPIA"},"but that makes things very hard to read"),"."),Object(i.b)("p",null,"To get around this, you can use ",Object(i.b)("inlineCode",{parentName:"p"},"opcall")," which works the same as ",Object(i.b)("inlineCode",{parentName:"p"},"pcall"),", but returns an object instead of the ",Object(i.b)("inlineCode",{parentName:"p"},"LuaTuple<T>"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"// result is { success: true; value: T; } | { success: false; error: string; }\nconst result = opcall(() => 123);\n\nif (result.success) {\n    print(result.value); // number\n} else {\n    print(result.error); // string\n}\n")),Object(i.b)("h3",{id:"identity"},Object(i.b)("inlineCode",{parentName:"h3"},"identity()")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"identity")," macro compiles to just the inner value you pass into it, allowing for a zero-cost type constraint abstraction. This is useful for verifying that a given value is the type you expect:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},'interface MyInterface {\n    a: number;\n    b: string;\n    c: boolean;\n}\n\nconst objects = {\n    abc: identity<MyInterface>({\n        a: 123,\n        b: "abc",\n        c: true,\n    }),\n};\n')))}p.isMDXComponent=!0}}]);